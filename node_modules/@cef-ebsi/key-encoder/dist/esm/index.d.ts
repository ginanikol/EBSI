/// <reference types="node" />
import elliptic from "elliptic";
interface PrivateKeyPKCS1 {
    version: number;
    privateKey: Buffer;
    parameters: readonly number[];
    publicKey?: {
        unused: number;
        data: Buffer;
    };
}
interface CurveOptions {
    curveParameters: readonly number[];
    privatePEMOptions: {
        label: string;
    };
    publicPEMOptions: {
        label: string;
    };
    curve: elliptic.ec;
}
type KeyFormat = "raw" | "pem" | "der";
export declare class KeyEncoder {
    static ECPrivateKeyASN: any;
    static ECPrivateKey8ASN: any;
    static SubjectPublicKeyInfoASN: any;
    algorithmID: number[];
    options: CurveOptions;
    constructor(options: string | CurveOptions);
    private PKCS1toPKCS8;
    privateKeyObject(rawPrivateKey: string, rawPublicKey: string): PrivateKeyPKCS1;
    publicKeyObject(rawPublicKey: string): {
        algorithm: {
            id: number[];
            curve: readonly number[];
        };
        pub: {
            unused: number;
            data: Buffer;
        };
    };
    encodePrivate(privateKey: string | Buffer, originalFormat: KeyFormat, destinationFormat: KeyFormat, destinationFormatType?: "pkcs8" | "pkcs1"): string;
    encodePublic(publicKey: string | Buffer, originalFormat: KeyFormat, destinationFormat: KeyFormat): string;
}
export {};
//# sourceMappingURL=index.d.ts.map