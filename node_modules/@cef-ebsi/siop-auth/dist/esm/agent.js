var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _Agent_privateKey;
import { calculateJwkThumbprint, exportJWK, importJWK, jwtDecrypt, SignJWT, } from "jose";
import { validate } from "@cef-ebsi/ebsi-did-resolver";
import { KEY_DID_METHOD_PREFIX } from "@cef-ebsi/key-did-resolver";
import { decryptSecp256k1, encode, getPublicKeyJwk } from "./utils.js";
import { expiration } from "./constants.js";
import { verifyJwtTar } from "./verifier.js";
export class Agent {
    constructor(opts = {}) {
        _Agent_privateKey.set(this, void 0);
        __classPrivateFieldSet(this, _Agent_privateKey, opts.privateKey ?? new Uint8Array(), "f");
        this.alg = opts.alg ?? "";
        this.kid = opts.kid ?? "";
        this.did = this.kid.slice(0, this.kid.indexOf("#"));
        this.siopV2 = opts.siopV2 ?? true;
        this.isDidV2 =
            this.did.startsWith(KEY_DID_METHOD_PREFIX) || validate(this.did) === 2;
    }
    async createResponse(responsePayload, options = {}) {
        const { responseMode = "fragment", syntaxType = "jwk_thumbprint_subject" } = options;
        const { redirectUri, ...extraPayload } = responsePayload;
        const privateKeyJwk = await exportJWK(__classPrivateFieldGet(this, _Agent_privateKey, "f"));
        const publicKeyJwk = getPublicKeyJwk(privateKeyJwk, this.alg);
        const payload = {
            aud: redirectUri,
            ...(syntaxType === "jwk_thumbprint_subject" && {
                sub: await calculateJwkThumbprint(publicKeyJwk),
                sub_jwk: publicKeyJwk,
            }),
            ...(syntaxType === "did_subject" && { sub: this.did }),
            ...(!this.siopV2 && { did: this.did }),
            ...extraPayload,
        };
        const issuer = this.siopV2
            ? "https://self-issued.me/v2"
            : "https://self-issued.me";
        const jwt = await new SignJWT(payload)
            .setProtectedHeader({
            alg: this.alg,
            typ: "JWT",
            kid: this.kid,
            ...(this.isDidV2 &&
                syntaxType === "did_subject" && { jwk: publicKeyJwk }),
        })
            .setIssuedAt()
            .setIssuer(issuer)
            .setExpirationTime(expiration.response)
            .sign(__classPrivateFieldGet(this, _Agent_privateKey, "f"));
        const urlParams = new URLSearchParams({
            id_token: jwt,
        }).toString();
        switch (responseMode) {
            case "post":
            case "form_post":
                return {
                    encoding: "application/x-www-form-urlencoded",
                    urlEncoded: encodeURI(redirectUri),
                    responseMode,
                    bodyEncoded: urlParams,
                    idToken: jwt,
                };
            case "query":
                return {
                    encoding: "application/x-www-form-urlencoded",
                    urlEncoded: encodeURI(`${redirectUri}?${urlParams}`),
                    responseMode,
                    idToken: jwt,
                };
            case "fragment":
                return {
                    encoding: "application/x-www-form-urlencoded",
                    urlEncoded: encodeURI(`${redirectUri}#${urlParams}`),
                    responseMode,
                    idToken: jwt,
                };
            default:
                throw new Error("invalid response mode");
        }
    }
    static async verifyAkeResponse(response, opts) {
        const { ake1_enc_payload: ake1EncPayload } = response;
        let ake1DecPayload;
        if (opts.alg === "ES256K") {
            const privateEncryptionKeyHex = encode.privateKey.fromJWKToHex(opts.privateEncryptionKeyJwk);
            ake1DecPayload = JSON.parse(decryptSecp256k1(privateEncryptionKeyHex, ake1EncPayload));
        }
        else {
            const privateEncryptionKey = await importJWK(opts.privateEncryptionKeyJwk, opts.alg);
            ake1DecPayload = (await jwtDecrypt(ake1EncPayload, privateEncryptionKey))
                .payload;
        }
        const { kid, nonce, access_token: accessToken } = ake1DecPayload;
        if (typeof kid !== "string" ||
            typeof accessToken !== "string" ||
            typeof nonce !== "string") {
            throw new Error(`invalid decrypted payload. Received: ${JSON.stringify(ake1DecPayload)}`);
        }
        if (nonce !== opts.nonce) {
            throw new Error(`Expected nonce ${opts.nonce}. Received ${nonce}`);
        }
        await verifyJwtTar(accessToken, {
            trustedAppsRegistry: opts.trustedAppsRegistry,
            audience: opts.audience || "ebsi-core-services",
            timeout: opts.timeout,
        });
        return accessToken;
    }
}
_Agent_privateKey = new WeakMap();
//# sourceMappingURL=agent.js.map