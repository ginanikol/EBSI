"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _RP_privateKey;
Object.defineProperty(exports, "__esModule", { value: true });
exports.RP = void 0;
const did_jwt_1 = require("did-jwt");
const jose_1 = require("jose");
const basics_1 = require("multiformats/basics");
const uuid_1 = require("uuid");
const node_url_1 = require("node:url");
const constants_js_1 = require("./constants.js");
const utils_js_1 = require("./utils.js");
const { base64url } = basics_1.bases;
const allowedSelfIssuers = [
    "https://self-issued.me",
    "https://self-issued.me/v2",
];
class RP {
    constructor(opts = {}) {
        var _a, _b, _c, _d, _e;
        _RP_privateKey.set(this, void 0);
        __classPrivateFieldSet(this, _RP_privateKey, (_a = opts.privateKey) !== null && _a !== void 0 ? _a : new Uint8Array(), "f");
        this.alg = (_b = opts.alg) !== null && _b !== void 0 ? _b : "";
        this.kid = (_c = opts.kid) !== null && _c !== void 0 ? _c : "";
        this.name = (_d = opts.name) !== null && _d !== void 0 ? _d : "";
        this.redirectUri = (_e = opts.redirectUri) !== null && _e !== void 0 ? _e : "";
    }
    createRequest(requestPayload) {
        return __awaiter(this, void 0, void 0, function* () {
            const payload = Object.assign({ scope: "openid did_authn", response_type: "id_token", response_mode: "post", client_id: this.redirectUri, redirect_uri: this.redirectUri, nonce: (0, uuid_1.v4)() }, requestPayload);
            const jwt = yield new jose_1.SignJWT(payload)
                .setProtectedHeader({
                alg: this.alg,
                typ: "JWT",
                kid: this.kid,
            })
                .setIssuedAt()
                .setIssuer(this.name)
                .setExpirationTime(constants_js_1.expiration.request)
                .sign(__classPrivateFieldGet(this, _RP_privateKey, "f"));
            const urlParams = new node_url_1.URLSearchParams({
                response_type: payload.response_type,
                client_id: payload.redirect_uri,
                scope: payload.scope,
                nonce: payload.nonce,
                request: jwt,
            });
            return `openid://?${urlParams.toString()}`;
        });
    }
    static verifyResponse(jwt, processClaims) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            const { payload, header } = (0, did_jwt_1.decodeJWT)(jwt);
            if (!allowedSelfIssuers.includes(payload.iss))
                throw new Error(`invalid issuer ${(_a = payload.iss) !== null && _a !== void 0 ? _a : ""}. Possible values: ${allowedSelfIssuers.join(", ")}`);
            if (!payload.nonce)
                throw new Error("No nonce found in JWT payload");
            const { claims } = payload;
            const resultClaims = yield processClaims(claims);
            return {
                payload: Object.assign({ did: resultClaims.did }, payload),
                header,
                resultClaims,
            };
        });
    }
    createAccessToken(resultVerification, payloadToken) {
        return __awaiter(this, void 0, void 0, function* () {
            const { did, encryption_key: encryptionKeyJwk } = resultVerification.resultClaims;
            const { nonce } = resultVerification.payload;
            const { alg } = resultVerification.header;
            const payloadAccessToken = Object.assign({ sub: did, did, aud: "ebsi-core-services", nonce: (0, uuid_1.v4)(), login_hint: "did_siop" }, payloadToken);
            const accessToken = yield new jose_1.SignJWT(payloadAccessToken)
                .setProtectedHeader({
                alg: this.alg,
                typ: "JWT",
                kid: this.kid,
            })
                .setIssuedAt()
                .setIssuer(this.name)
                .setExpirationTime(constants_js_1.expiration.accessToken)
                .sign(__classPrivateFieldGet(this, _RP_privateKey, "f"));
            const payloadEncryption = {
                access_token: accessToken,
                kid: this.kid,
                nonce,
            };
            let encryptedAccessToken;
            if (alg === "ES256K") {
                const encryptionKeyHex = utils_js_1.encode.publicKey.fromJWKToHex(encryptionKeyJwk);
                encryptedAccessToken = (0, utils_js_1.encryptSecp256k1)(payloadEncryption, encryptionKeyHex);
            }
            else {
                const encryptionKey = yield (0, jose_1.importJWK)(encryptionKeyJwk, alg);
                encryptedAccessToken = yield new jose_1.EncryptJWT(payloadEncryption)
                    .setProtectedHeader({
                    alg: alg === "RS256" ? "RSA1_5" : "ECDH-ES",
                    enc: "A128GCM",
                })
                    .encrypt(encryptionKey);
            }
            const ake1Sig = yield new jose_1.SignJWT({
                ake1_nonce: nonce,
                ake1_enc_payload: encryptedAccessToken,
                did,
            })
                .setProtectedHeader({
                alg: this.alg,
                typ: "JWT",
                kid: this.kid,
            })
                .setIssuedAt()
                .setIssuer(this.name)
                .setExpirationTime(constants_js_1.expiration.accessToken)
                .sign(__classPrivateFieldGet(this, _RP_privateKey, "f"));
            const ake1SigPayloadBase64url = ake1Sig.split(".")[1];
            const ake1SigPayload = JSON.parse(basics_1.bytes.toString(base64url.baseDecode(ake1SigPayloadBase64url)));
            const ake1JwsDetached = ake1Sig.replace(ake1SigPayloadBase64url, "");
            return {
                ake1_enc_payload: encryptedAccessToken,
                ake1_sig_payload: ake1SigPayload,
                ake1_jws_detached: ake1JwsDetached,
                kid: this.kid,
            };
        });
    }
}
exports.RP = RP;
_RP_privateKey = new WeakMap();
//# sourceMappingURL=rp.js.map