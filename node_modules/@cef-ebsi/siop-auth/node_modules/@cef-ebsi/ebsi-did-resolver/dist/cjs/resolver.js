"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getResolver = void 0;
const constants_js_1 = require("./constants.js");
const v1_js_1 = require("./resolvers/v1.js");
const validator_js_1 = require("./validator.js");
function getResolver(resolverOptions) {
    function resolve(did, _, __, didResolutionOptions) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!resolverOptions || typeof resolverOptions !== "object") {
                return {
                    didDocument: null,
                    didDocumentMetadata: {},
                    didResolutionMetadata: {
                        error: constants_js_1.DID_RESOLUTION_ERROR_CODES.CONFIGURATION_ERROR,
                        message: "Invalid or missing resolver options",
                    },
                };
            }
            try {
                (0, validator_js_1.validate)(did);
            }
            catch (e) {
                const message = e instanceof Error ? e.message : "Unknown error";
                return {
                    didDocument: null,
                    didDocumentMetadata: {},
                    didResolutionMetadata: {
                        error: "invalidDid",
                        message,
                    },
                };
            }
            return (0, v1_js_1.resolve)(did, resolverOptions.registry, didResolutionOptions);
        });
    }
    return { ebsi: resolve };
}
exports.getResolver = getResolver;
//# sourceMappingURL=resolver.js.map