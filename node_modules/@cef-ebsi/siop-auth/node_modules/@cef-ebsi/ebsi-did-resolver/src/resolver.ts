import type {
  DIDResolutionOptions,
  DIDResolutionResult,
  DIDResolver,
  ParsedDID,
} from "did-resolver";
import { DID_RESOLUTION_ERROR_CODES } from "./constants.js";
import { resolve as resolveV1 } from "./resolvers/v1.js";
import { validate } from "./validator.js";

export interface ResolverOptions {
  /**
   * Only used with EBSI DID method v1.
   */
  registry?: string;
}

/**
 * EBSI DID Resolver for the "did:ebsi:" method. Supports only Legal Entities (DID Method v1).
 */
export function getResolver(
  resolverOptions: ResolverOptions,
): Record<"ebsi", DIDResolver> {
  async function resolve(
    did: string,
    _: ParsedDID,
    __: unknown,
    didResolutionOptions?: DIDResolutionOptions,
  ): Promise<DIDResolutionResult> {
    if (!resolverOptions || typeof resolverOptions !== "object") {
      return {
        didDocument: null,
        didDocumentMetadata: {},
        didResolutionMetadata: {
          error: DID_RESOLUTION_ERROR_CODES.CONFIGURATION_ERROR,
          message: "Invalid or missing resolver options",
        },
      };
    }

    // Validate DID
    try {
      validate(did);
    } catch (e) {
      const message = e instanceof Error ? e.message : "Unknown error";
      return {
        didDocument: null,
        didDocumentMetadata: {},
        didResolutionMetadata: {
          error: "invalidDid",
          message,
        },
      };
    }

    return resolveV1(did, resolverOptions.registry, didResolutionOptions);
  }

  return { ebsi: resolve };
}
