/**
 * Base class implementing Problem Details for HTTP APIs.
 * RFC: [Problem Details for HTTP APIs](https://tools.ietf.org/html/rfc7807)
 */

interface ErrorOptions {
  // A URI reference that identifies the problem type. This specification encourages that, when dereferenced, it provides human-readable documentation for the problem type. When this member is not present, its value is assumed to be "about:blank".
  type?: string;
  // A human-readable explanation specific to this occurrence of the problem.
  detail?: string;
  // A URI reference that identifies the specific occurrence of the problem.  It may or may not yield further information if dereferenced.
  instance?: string;
  // Extension members. See https://tools.ietf.org/html/rfc7807#section-3.2
  extensions?: { [x: string]: unknown };
}

export class ProblemDetailsError extends Error {
  public status: number;

  public title: string;

  public type?: string;

  public detail?: string;

  public instance?: string;

  public extensions?: { [x: string]: unknown };

  /**
   * @param status - The HTTP status code generated by the origin server for this occurrence of the problem.
   * @param title - A short, human-readable summary of the problem type. It SHOULD NOT change from occurrence to occurrence of the problem, except for purposes of localization.
   * @param options - An object containing optional properties.
   */
  constructor(status: number, title: string, options?: ErrorOptions) {
    super(title);
    this.name = "ProblemDetailsError";
    this.status = status;
    this.title = title;

    // Extra
    if (options) {
      if (options.type) this.type = options.type;
      if (options.detail) this.detail = options.detail;
      if (options.instance) this.instance = options.instance;
      if (options.extensions) this.extensions = options.extensions;
    }

    // Set type if no value was provided
    if (!this.type) this.type = "about:blank";
  }

  toJSON(): {
    title: string;
    status: number;
    type?: string;
    detail?: string;
    instance?: string;
    [x: string]: unknown;
  } {
    return {
      title: this.title,
      status: this.status,
      ...(this.type && { type: this.type }),
      ...(this.detail && { detail: this.detail }),
      ...(this.instance && { instance: this.instance }),
      ...this.extensions,
    };
  }

  override toString(): string {
    return `${this.status} - ${this.title}`;
  }
}
