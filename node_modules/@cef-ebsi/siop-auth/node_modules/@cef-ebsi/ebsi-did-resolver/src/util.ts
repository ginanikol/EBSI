import { base58btc } from "multiformats/bases/base58";
import {
  EBSI_DID_METHOD_PREFIX,
  EBSI_DID_SPECS,
  LEGAL_ENTITY,
  SUPPORTED_VERSIONS,
} from "./constants.js";

/**
 * Generic function to create a `did:ebsi:` DID based on the provided subject identifier (bytes).
 *
 * @param subjectIdentifierBytes - The method subject identifier (bytes).
 * @param version - Either "LEGAL_ENTITY" (default) or "NATURAL_PERSON"
 * @returns The did:ebsi DID.
 */
export function createDid(
  subjectIdentifierBytes: ArrayLike<number>,
  version: (typeof SUPPORTED_VERSIONS)[number] = LEGAL_ENTITY,
): string {
  // Define bytes array size
  const bytesArray = new Uint8Array(1 + EBSI_DID_SPECS[version].BYTE_LENGTH);

  // Set version number
  bytesArray.set([EBSI_DID_SPECS[version].VERSION_ID]);

  if (subjectIdentifierBytes.length !== EBSI_DID_SPECS[version].BYTE_LENGTH) {
    throw new Error(
      `Invalid subject identifier length. Expected: ${EBSI_DID_SPECS[version].BYTE_LENGTH} bytes. Received: ${subjectIdentifierBytes.length} bytes.`,
    );
  }

  bytesArray.set(subjectIdentifierBytes, 1);

  // Encode method specific identifier
  const methodSpecificIdentifier = base58btc.encode(bytesArray);

  return `${EBSI_DID_METHOD_PREFIX}${methodSpecificIdentifier}`;
}
