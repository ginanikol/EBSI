import type { JWK } from "jose";
import type { JWTHeader, JWTPayload } from "did-jwt";

export type UriDidAuth = {
  urlEncoded: string;
  encoding: "application/x-www-form-urlencoded";
};

export interface UriResponse extends UriDidAuth {
  responseMode?: ResponseMode;
  bodyEncoded?: string;
  idToken?: string;
}

export interface RequestClaims {
  userinfo?: {
    [x: string]: unknown;
  };
  id_token?: {
    [x: string]: unknown;
  };
  [x: string]: unknown;
}

export interface ResponseClaims {
  encryption_key: JWK;
  verified_claims?: string;
  [x: string]: unknown;
}

export type ResponseMode = "fragment" | "form_post" | "post" | "query";

export interface RequestPayload {
  redirectUri?: string;
  responseMode?: ResponseMode;
  responseContext?: string;
  claims?: RequestClaims;
  [x: string]: unknown;
}

export interface ResponsePayload {
  redirectUri: string;
  nonce?: string;
  responseMode?: ResponseMode;
  claims?: ResponseClaims;
  [x: string]: unknown;
}

export interface JWTPayloadEbsi extends JWTPayload {
  nonce: string;
  claims?: ResponseClaims;
}

export interface ResultProcessClaims {
  encryption_key: JWK;
  did: string;
  [x: string]: unknown;
}

export interface VerifyResponseResult {
  payload: JWTPayloadEbsi;
  header: JWTHeader;
  resultClaims: ResultProcessClaims;
}

export interface Ake1SigPayload {
  ake1_enc_payload: string;
  ake1_nonce: string;
  kid?: string;
  iat: number;
  iss: string;
}
export interface AkeResponse {
  ake1_enc_payload: string;
  ake1_sig_payload: Ake1SigPayload;
  ake1_jws_detached: string;
  did?: string;
}

export interface AuthPage {
  items: {
    authorizationId: string;
    requesterApplicationName: string;
    href: string;
  }[];
  links: { last: string };
}

export interface AuthorizationResponseObject {
  authorizationId: string;
  resourceApplicationId: string;
  requesterApplicationId: string;
  resourceApplicationName: string;
  requesterApplicationName: string;
  iss: string;
  permissions: {
    create: string;
    read: string;
    update: string;
    delete: string;
  };
  status: string;
  notBefore: number;
  notAfter: number;
}

export interface CreateResponseOptions {
  responseMode?: ResponseMode;
  syntaxType?: "jwk_thumbprint_subject" | "did_subject";
}
