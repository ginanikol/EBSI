import type {
  DIDResolutionOptions,
  DIDResolutionResult,
  DIDResolver,
  ParsedDID,
  Resolvable,
} from "did-resolver";
import { DID_LD_JSON, SUPPORTED_CONTENT_TYPES } from "./constants.js";
import {
  DidResolutionError,
  RepresentationNotSupportedError,
} from "./errors/index.js";
import { resolveDidDoc } from "./internals.js";

/**
 * DID Resolver for Natural Persons (did:key method)
 *
 * @returns A record mapping the "key" method with the resolver.
 */
export function getResolver(): Record<"key", DIDResolver> {
  function resolve(
    did: string,
    _: ParsedDID,
    __: Resolvable,
    didResolutionOptions?: DIDResolutionOptions,
  ): Promise<DIDResolutionResult> {
    try {
      const contentType = didResolutionOptions?.accept || DID_LD_JSON;

      if (!SUPPORTED_CONTENT_TYPES.includes(contentType)) {
        throw new RepresentationNotSupportedError(
          `Representation "${contentType}" is not supported`,
        );
      }

      const didDocument = resolveDidDoc(did, contentType);

      return Promise.resolve({
        didDocument,
        didDocumentMetadata: {},
        didResolutionMetadata: { contentType },
      });
    } catch (e) {
      if (e instanceof DidResolutionError) {
        return Promise.resolve({
          didDocument: null,
          didDocumentMetadata: {},
          didResolutionMetadata: {
            error: e.code,
            message: e.message,
          },
        });
      }

      const message = e instanceof Error ? e.message : "Unknown error";

      return Promise.resolve({
        didDocument: null,
        didDocumentMetadata: {},
        didResolutionMetadata: {
          error: "invalidDid",
          message,
        },
      });
    }
  }

  return { key: resolve };
}
