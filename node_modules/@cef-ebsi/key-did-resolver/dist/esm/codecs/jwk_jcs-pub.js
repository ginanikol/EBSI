import isPlainObject from "lodash.isplainobject";
export const name = "jwk_jcs-pub";
export const code = 0xeb51;
const textEncoder = new TextEncoder();
const textDecoder = new TextDecoder();
function check(value, description) {
    if (typeof value !== "string" || !value) {
        throw new Error(`${description} missing or invalid`);
    }
}
function validatePlainObject(value) {
    if (!isPlainObject(value)) {
        throw new Error("JWK must be an object");
    }
}
function validateJwk(jwk) {
    validatePlainObject(jwk);
    switch (jwk["kty"]) {
        case "EC":
            check(jwk["crv"], '"crv" (Curve) Parameter');
            check(jwk["x"], '"x" (X Coordinate) Parameter');
            check(jwk["y"], '"y" (Y Coordinate) Parameter');
            break;
        case "OKP":
            check(jwk["crv"], '"crv" (Subtype of Key Pair) Parameter');
            check(jwk["x"], '"x" (Public Key) Parameter');
            break;
        case "RSA":
            check(jwk["e"], '"e" (Exponent) Parameter');
            check(jwk["n"], '"n" (Modulus) Parameter');
            break;
        default:
            throw new Error('"kty" (Key Type) Parameter missing or unsupported');
    }
}
function canonicaliseJwk(jwk) {
    let components;
    switch (jwk.kty) {
        case "EC":
            components = { crv: jwk.crv, kty: jwk.kty, x: jwk.x, y: jwk.y };
            break;
        case "OKP":
            components = { crv: jwk.crv, kty: jwk.kty, x: jwk.x };
            break;
        case "RSA":
            components = { e: jwk.e, kty: jwk.kty, n: jwk.n };
            break;
    }
    return components;
}
export function encode(jwk) {
    validateJwk(jwk);
    const components = canonicaliseJwk(jwk);
    return textEncoder.encode(JSON.stringify(components));
}
export function decode(bytes) {
    const jwk = JSON.parse(textDecoder.decode(bytes));
    validateJwk(jwk);
    if (JSON.stringify(jwk) !== JSON.stringify(canonicaliseJwk(jwk))) {
        throw new Error("The JWK embedded in the DID is not correctly formatted");
    }
    return jwk;
}
//# sourceMappingURL=jwk_jcs-pub.js.map