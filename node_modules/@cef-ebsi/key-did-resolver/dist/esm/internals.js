import { varint } from "multiformats";
import { base58btc } from "multiformats/bases/base58";
import { KEY_DID_METHOD_PREFIX } from "./constants.js";
import { InvalidDidError } from "./errors/index.js";
import * as codec from "./codecs/jwk_jcs-pub.js";
import * as jwkDriver from "./drivers/jwk_jcs-pub.js";
const codecToDriver = {
    [codec.code]: jwkDriver,
};
export const encodePublicKey = (pubKeyBytes, code) => {
    const size = pubKeyBytes.byteLength;
    const sizeOffset = varint.encodingLength(code);
    const messageOffset = sizeOffset;
    const bytes = new Uint8Array(messageOffset + size);
    varint.encodeTo(code, bytes, 0);
    bytes.set(pubKeyBytes, messageOffset);
    return base58btc.encode(bytes);
};
export const decodePublicKey = (publicKey) => {
    const multicodecPubKey = base58btc.decode(publicKey);
    const [code, sizeOffset] = varint.decode(multicodecPubKey);
    const pubKeyBytes = multicodecPubKey.slice(sizeOffset);
    return {
        pubKeyBytes,
        code,
    };
};
export function resolveDidDoc(did, contentType) {
    let pubKeyBytes;
    let code;
    if (!did || typeof did !== "string") {
        throw new InvalidDidError("The DID must be a string");
    }
    if (!did.startsWith(KEY_DID_METHOD_PREFIX)) {
        throw new InvalidDidError(`The DID must start with "${KEY_DID_METHOD_PREFIX}"`);
    }
    const methodSpecificIdentifier = did.substring(KEY_DID_METHOD_PREFIX.length);
    if (!methodSpecificIdentifier.startsWith(base58btc.prefix)) {
        throw new InvalidDidError(`The method-specific identifier must start with "${base58btc.prefix}" (multibase base58btc-encoded)`);
    }
    try {
        const decodedResult = decodePublicKey(methodSpecificIdentifier);
        pubKeyBytes = decodedResult.pubKeyBytes;
        code = decodedResult.code;
    }
    catch (e) {
        throw new InvalidDidError("The method-specific identifier is not a valid multibase base58btc-encoded string");
    }
    const driver = codecToDriver[code];
    if (!driver) {
        throw new InvalidDidError(`Unsupported codec ${code}`);
    }
    const didDocument = driver.pubKeyBytesToDidDoc(pubKeyBytes, methodSpecificIdentifier, contentType);
    return didDocument;
}
//# sourceMappingURL=internals.js.map