import { DID_LD_JSON, SUPPORTED_CONTENT_TYPES } from "./constants.js";
import { DidResolutionError, RepresentationNotSupportedError, } from "./errors/index.js";
import { resolveDidDoc } from "./internals.js";
export function getResolver() {
    function resolve(did, _, __, didResolutionOptions) {
        try {
            const contentType = didResolutionOptions?.accept || DID_LD_JSON;
            if (!SUPPORTED_CONTENT_TYPES.includes(contentType)) {
                throw new RepresentationNotSupportedError(`Representation "${contentType}" is not supported`);
            }
            const didDocument = resolveDidDoc(did, contentType);
            return Promise.resolve({
                didDocument,
                didDocumentMetadata: {},
                didResolutionMetadata: { contentType },
            });
        }
        catch (e) {
            if (e instanceof DidResolutionError) {
                return Promise.resolve({
                    didDocument: null,
                    didDocumentMetadata: {},
                    didResolutionMetadata: {
                        error: e.code,
                        message: e.message,
                    },
                });
            }
            const message = e instanceof Error ? e.message : "Unknown error";
            return Promise.resolve({
                didDocument: null,
                didDocumentMetadata: {},
                didResolutionMetadata: {
                    error: "invalidDid",
                    message,
                },
            });
        }
    }
    return { key: resolve };
}
//# sourceMappingURL=resolver.js.map