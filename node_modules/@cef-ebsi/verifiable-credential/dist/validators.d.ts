import { DIDDocument, DIDResolutionMetadata } from "did-resolver";
import Ajv2020 from "ajv/dist/2020";
import { EbsiEnvConfiguration, EbsiVerifiableAttestation, VerifyCredentialOptions } from "./types";
export declare function validateHostname(hostname: string, trustedHostnames?: string[]): void;
export declare function validateTrustedSchemasRegistryUrlPathname(pathname: string): void;
export declare function validateTrustedSchemasRegistryUrlHostname(hostname: string, trustedHostnames?: string[]): void;
export declare function validateTrustedSchemasRegistryUrl(url: string, trustedHostnames?: string[]): void;
export declare function handleDidResolutionErrors(didDocument: DIDDocument | null, didResolutionMetadata: DIDResolutionMetadata, did: string): asserts didDocument is DIDDocument;
export declare const getAjvInstance: (timeout?: number, trustedHostnames?: string[]) => Ajv2020;
/**
 * EBSI_VC_001: All the EBSI Verifiable Credentials MUST be conform to the Verifiable Attestation model.
 *
 * Validates that the given value is an EbsiVerifiableAttestation object.
 *
 * @param value - any value
 * @param timeout - Axios requests timeout. Default: 15 seconds
 * @param trustedHostnames - List of additional trusted hostnames running the EBSI Core Services APIs.
 */
export declare function validateEbsiVerifiableAttestation(value: unknown, timeout?: number, trustedHostnames?: string[]): asserts value is EbsiVerifiableAttestation;
/**
 * Validates that the given value is a well-formatted Legal Entity EBSI DID.
 * Throws a `ValidationError` if it is not.
 *
 * Note: this function doesn't check if the DID is registered in the DID Registry.
 *
 * @param value - any value
 */
export declare function validateLegalEntityDid(value: unknown): void;
/**
 * Validates that the given value is a well-formatted EBSI DID (Legal Entity or Natural Person).
 * Throws a `ValidationError` if it is not.
 *
 * Note: this function doesn't check if the DID is registered in the DID Registry.
 *
 * @param value - any value
 * @param allowLegacyEbsiMethodV2 - if true (default), allows the legacy EBSI DID method v2. Will be removed in the future.
 */
export declare function validateDid(value: unknown, allowLegacyEbsiMethodV2?: boolean): asserts value is string;
/**
 * Validates the credential issuer.
 *
 * Rules:
 * - EBSI_VC_005: `payload.issuer` MUST contain a valid EBSI DID
 * - both DIDs (`payload.issuer` and `did`) MUST match
 * - the issuer `kid` MUST be related to the issuer DID (starts with the issuer DID)
 * - the issuer DID MUST resolve to a valid DID document
 * - `kid` MUST be a valid verification method in the DID document
 * - EBSI_VC_006: the issuer MUST be registered in the Trusted Issuers Registry
 *
 * @param payload - `EbsiVerifiableAttestation`
 * @param did - the DID of the credential signer
 * @param kid - the kid identifying the verification method used to sign the JWT
 * @param config - a configuration object containing the URLs to the DID Registry and Trusted Issuers Registry
 * @param skipValidation - set to true to skip the dynamic validation (i.e. checking against DID Registry / Trusted Issuers Registry)
 * @param timeout - Axios requests timeout. Default: 15 seconds
 */
export declare function validateIssuer(payload: Pick<EbsiVerifiableAttestation, "issuer">, did: string, kid: string, config: EbsiEnvConfiguration, timeout?: number): Promise<void>;
/**
 * Validates the Verifiable Credential `credentialSubject` property.
 *
 * Rules:
 * - The credential subject must be a valid EBSI DID except when the credential type is `StatusList2021Credential`.
 *
 * Note: we don't support multiple credential subjects.
 *
 *   "Implementers are warned that JWTs are not capable of encoding multiple subjects and are
 *    thus not capable of encoding a verifiable credential with more than one subject."
 *
 * See https://www.w3.org/TR/vc-data-model/#jwt-encoding
 *
 * @param payload - `EbsiVerifiableAttestation`
 */
export declare function validateCredentialSubject(payload: Pick<EbsiVerifiableAttestation, "credentialSubject" | "type">): void;
/**
 * Validates the credential payload according to its schema, as defined in `payload.credentialSchema`.
 *
 * Rules:
 * - EBSI_VC_002: validate the payload with the custom JSON schema defined in credentialSchema.id.
 *   Only schemas from trusted sources are allowed.
 *
 * Notes:
 * - make sure to run `validateEbsiVerifiableAttestation` on the payload before calling `validateDates`.
 *
 * @param payload - `EbsiVerifiableAttestation`
 * @param timeout - Axios requests timeout. Default: 15 seconds
 * @param trustedHostnames - List of additional trusted hostnames running the EBSI Core Services APIs.
 */
export declare function validateCredentialSchema(payload: EbsiVerifiableAttestation, timeout?: number, trustedHostnames?: string[]): Promise<void>;
/**
 * Validates the Verifiable Credential dates: `issuanceDate`/`validFrom`, `expirationDate`.
 *
 * Rules:
 * - EBSI_VC_003: `issuanceDate` and `validFrom` MUST be equal.
 * - EBSI_VC_004: `issuanceDate`/`validFrom` must be less than `expirationDate` (if defined)
 *
 * Notes:
 * - make sure to run `validateEbsiVerifiableAttestation` on the payload before calling `validateDates`.
 * - this function does NOT verify if the VC is valid at the current time. It only compares the
 *   provided dates.
 *
 * @param payload - `EbsiVerifiableAttestation`
 */
export declare function validateDates(payload: Pick<EbsiVerifiableAttestation, "issuanceDate" | "validFrom" | "expirationDate">, validAt?: number): void;
/**
 * Validates that the '\@context' is conform to the W3C specs.
 *
 * @param context - a set of URIs to validate
 */
export declare function validateContext(context: string[]): void;
/**
 * Validates that the 'type' is conform to the W3C specs.
 *
 * @param type - a set of types to validate
 */
export declare function validateType(type: string[]): void;
/**
 * Validates that the StatusList2021Entry credential is not revoked nor suspended.
 *
 * @see https://w3c.github.io/vc-status-list-2021/
 *
 * @param credentialStatus - the credentialStatus object to validate
 * @param config - a configuration object containing the URLs to the Trusted Issuers Registry
 * @param options - a configuration object containing the timeout for the HTTP requests
 */
export declare function validateStatusList2021Entry(credentialStatus: NonNullable<EbsiVerifiableAttestation["credentialStatus"]>, config: EbsiEnvConfiguration, options: VerifyCredentialOptions): Promise<void>;
/**
 * Validates that the EbsiAccreditationEntry credential is not revoked nor suspended.
 *
 * @param credentialStatus - the credentialStatus object to validate
 * @param credentialSubject - the credentialSubject object related to the credentialStatus
 * @param config - a configuration object containing the URLs to the Trusted Issuers Registry
 * @param options - a configuration object containing the timeout for the HTTP requests
 */
export declare function validateEbsiAccreditationEntry(credentialStatus: NonNullable<EbsiVerifiableAttestation["credentialStatus"]>, credentialSubject: EbsiVerifiableAttestation["credentialSubject"], config: EbsiEnvConfiguration, options: VerifyCredentialOptions): Promise<void>;
/**
 * Validates that the credential is not revoked nor suspended when it contains a `credentialStatus`
 * property.
 *
 * @see https://w3c.github.io/vc-status-list-2021/
 *
 * @param payload - `EbsiVerifiableAttestation`
 * @param config - a configuration object containing the URLs to the Trusted Issuers Registry
 * @param options - a configuration object containing the timeout for the HTTP requests
 */
export declare function validateCredentialStatus(payload: Pick<EbsiVerifiableAttestation, "credentialStatus" | "credentialSubject">, config: EbsiEnvConfiguration, options: VerifyCredentialOptions): Promise<void>;
/**
 * Validates the VC JWT properties. Ensures that all the properties are available and match the VC.
 *
 * Rules:
 * - The JWT payload "vc" property must be conform to the EBSI VA schema
 * - EBSI_JWT_VC_001 The JWT claims MUST match with the VC properties
 *
 * @param jwt - The VC JWT
 * @param timeout - Axios requests timeout. Default: 15 seconds
 * @param trustedHostnames - List of additional trusted hostnames running the EBSI Core Services APIs.
 */
export declare function validateJwtProps(jwt: string, timeout?: number, trustedHostnames?: string[]): void;
/**
 *
 * @param vc - The VC JWT
 * @param config - A configuration object containing the URLs to the different registries
 * @param options - Validation options
 * @returns The EBSI Verifiable Attestation
 */
export declare function verifyVcJwt(vc: string, config: EbsiEnvConfiguration, options: VerifyCredentialOptions): Promise<EbsiVerifiableAttestation>;
