import type { CreateVerifiableCredentialOptions, EbsiVerifiableAttestation, EbsiIssuer, VerifyCredentialOptions } from "./types";
export * from "./config";
export * from "./constants";
export * from "./contexts";
export * from "./types";
export * from "./errors";
export * from "./utils";
export * from "./validators";
export * from "./validateAccreditations";
/**
 * Creates a VerifiableCredential given an `EbsiVerifiableAttestation` and an `EbsiIssuer`.
 *
 * This method transforms the payload into the [JWT encoding](https://www.w3.org/TR/vc-data-model/#jwt-encoding)
 * described in the [W3C VC spec](https://www.w3.org/TR/vc-data-model).
 *
 * The `issuer` is then used to assign an algorithm, and then sign the JWT.
 *
 * @param payload - `EbsiVerifiableAttestation`
 * @param issuer - `EbsiIssuer`: the DID, kid, signer and algorithm that will sign the token
 * @returns a `Promise` that resolves to the JWT encoded verifiable credential or rejects with
 * `ValidationError` if the `payload` is not EBSI compliant
 */
export declare function createVerifiableCredentialJwt(payload: EbsiVerifiableAttestation | unknown, issuer: EbsiIssuer, options: CreateVerifiableCredentialOptions): Promise<string>;
/**
 * Verifies and validates a VerifiableCredential that is encoded as a JWT according to the W3C and EBSI specs.
 *
 * @param vc - the credential to be verified.
 * @returns a `Promise` that resolves to a `VerifiedCredential` or rejects with `ValidationError` if the input is not EBSI compliant
 */
export declare function verifyCredentialJwt(vc: string, options: VerifyCredentialOptions): Promise<EbsiVerifiableAttestation>;
