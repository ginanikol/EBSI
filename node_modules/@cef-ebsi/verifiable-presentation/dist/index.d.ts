import type { CreateVerifiablePresentationJwtOptions, EbsiIssuer, VerifyPresentationJwtOptions, EbsiVerifiablePresentation } from "./types";
export * from "./config";
export * from "./constants";
export * from "./types";
export * from "./validators";
/**
 * Creates a Verifiable Presentation JWT given an `EbsiVerifiablePresentation` and an `EbsiIssuer`.
 *
 * This method transforms the payload into the [JWT encoding](https://www.w3.org/TR/vc-data-model/#jwt-encoding)
 * described in the [W3C VC spec](https://www.w3.org/TR/vc-data-model) and then validated to conform to the EBSI
 * required spec.
 *
 * The `holder` is then used to assign an algorithm and sign the JWT.
 *
 * @param payload - `EbsiVerifiablePresentation`
 * @param holder - `EbsiIssuer` of the Presentation JWT (holder of the VC), signer and algorithm that will sign the token
 * @param audience - represents the identity of the intended audience (DID, URI)
 * @param options - `CreateVerifiablePresentationOptions` allows to pass additional values to the resulting JWT payload
 * @returns a `Promise` that resolves to the JWT encoded verifiable presentation or rejects with `ValidationError` if the
 * `payload` is not W3C compliant
 */
export declare function createVerifiablePresentationJwt(payload: EbsiVerifiablePresentation | unknown, holder: EbsiIssuer, audience: string, options: CreateVerifiablePresentationJwtOptions): Promise<string>;
/**
 * Verifies and validates an EBSI Verifiable Presentation that is encoded as a JWT according to the EBSI and W3C specs.
 *
 * @param presentation - the presentation to be verified. Currently only the JWT encoding is supported by this library
 * @param audience - represents the identity of the intended audience (DID, URI)
 * @param options - optional verification options that need to be satisfied
 * @returns a `Promise` that resolves to a `VerifiedPresentation` or rejects with `ValidationError` if the input is
 * not EBSI compliant or the VerifyPresentationJwtOptions are not satisfied.
 */
export declare function verifyPresentationJwt(presentation: string, audience: string, options: VerifyPresentationJwtOptions): Promise<EbsiVerifiablePresentation>;
