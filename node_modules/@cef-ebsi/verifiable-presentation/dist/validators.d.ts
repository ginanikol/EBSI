import { Resolver } from "did-resolver";
import type { JWTPayload } from "jose";
import type { CreateVerifiablePresentationJwtOptions, EbsiVerifiablePresentation, ProofPurposeTypes, VpJwtPayload, VpJwtHeader, ValidateSignatureOptions, VerifyPresentationJwtOptions } from "./types";
export declare const getAjvInstance: (timeout?: number, trustedHostnames?: string[]) => import("ajv/dist/2020").default;
/**
 * EBSI_VP_001: All the EBSI Verifiable Presentations MUST be conform to the Verifiable Presentation model.
 *
 * Validates that the given value is an EbsiVerifiablePresentation object.
 *
 * @param value - any value
 * @param schemaKey - Ajv cache key (URL) to be used for the EBSI VP schema
 * @param trustedSchemasRegistry - Trusted Schemas Registry API URL
 */
export declare function validateEbsiVerifiablePresentation(value: unknown, timeout?: number, trustedHostnames?: string[]): asserts value is EbsiVerifiablePresentation;
/**
 * Validates that the given value is a valid timestamp.
 *
 * @param value - value to validate
 */
export declare function validateTimestamp(value: unknown): void;
/**
 * Helper function that checks if a DID is a legacy `did:ebsi` v2 (NP) DID.
 *
 * @param did - The DID to check.
 * @returns True if the DID is a legacy `did:ebsi` v2 DID, false otherwise.
 */
export declare function isLegacyNaturalPersonDid(did: string): boolean;
/**
 * Validates the presentation holder.
 *
 * Rules:
 * - the holder DID MUST be a valid EBSI DID
 * - both DIDs (`payload.holder` and `holder`) MUST match
 * - the holder `kid` MUST be related to the holder DID (starts with the holder DID)
 * - (optional) the holder DID SHOULD resolve to a valid DID document
 * - (optional) `kid` SHOULD be a valid verification method in the DID document
 *
 * @param payload - an EbsiVerifiablePresentation
 * @param holder - the VP holder's DID
 * @param kid - the kid of the key used to sign the VP
 * @param proofPurpose - one of "authentication", "assertionMethod", "capabilityInvocation", "capabilityDelegation". Default: "authentication"
 * @param timeout - Axios timeout (default: 15 seconds)
 */
export declare function validateHolder(payload: Pick<EbsiVerifiablePresentation, "holder">, holder: string, kid: string, resolver: Resolver, proofPurpose?: ProofPurposeTypes, timeout?: number, skipHolderDidResolutionValidation?: boolean): Promise<void>;
/**
 * Validates that the VC credentialSubject matches the VP holder.
 *
 * @param holder - the VP holder's DID
 * @param payload - an EbsiVerifiablePresentation
 */
export declare function validateCredentialSubject(payload: Partial<JWTPayload>, holder: string): void;
/**
 * Validates VC JWT in the context of the VP.
 *
 * @param vcJwt - Verifiable Credential as JWT
 * @param holder - the VP holder's DID
 * @param options - ebsiEnv, nbf, and exp to be used to verify the VC
 */
export declare function validateCredentialJwt(vcJwt: string, holder: string, options: CreateVerifiablePresentationJwtOptions): Promise<void>;
/**
 * Validates all the VP's credentials. EBSI_VP_004
 *
 * @param payload - an EbsiVerifiablePresentation
 * @param holder - the VP holder's DID
 * @param options - CreateVerifiablePresentationJwtOptions object
 */
export declare function validateCredentials(payload: Pick<EbsiVerifiablePresentation, "verifiableCredential">, holder: string, options: CreateVerifiablePresentationJwtOptions): Promise<void>;
/**
 * Validates that the '\@context' is conform to the W3C specs.
 *
 * @param context - a set of URIs to validate
 */
export declare function validateContext(context: string[]): void;
/**
 * Validates that the 'type' is conform to the W3C specs.
 *
 * @param type - a set of types to validate
 */
export declare function validateType(type: string[]): void;
/**
 * Validates the VP JWT properties. Ensures that all the properties are available and match the VP.
 *
 * Rules:
 * - The JWT payload "vp" property must be conform to the EBSI VP schema
 * - EBSI_JWT_VP_001 The JWT claims MUST match with the VC properties
 *
 * @param jwt - the VP JWT
 * @param audience - represents the identity of the intended audience
 * @param options - extra verification options
 */
export declare function validateJwtProps(jwt: string, audience: string, options?: Pick<VerifyPresentationJwtOptions, "validAt" | "timeout" | "trustedHostnames">): {
    payload: VpJwtPayload;
    header: VpJwtHeader;
};
export declare function validateSignature(jwt: string, resolver: Resolver, options?: ValidateSignatureOptions): Promise<void>;
