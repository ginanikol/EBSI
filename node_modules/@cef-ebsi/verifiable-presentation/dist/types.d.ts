import type { CreateVerifiableCredentialOptions, EbsiEnvConfiguration, VerifyCredentialOptions } from "@cef-ebsi/verifiable-credential";
import type { JWK, JWTHeaderParameters, JWTPayload } from "jose";
import type { EBSIVerifiablePresentation } from "./types/EBSIVerifiablePresentation";
export type { EbsiIssuer } from "@cef-ebsi/verifiable-credential";
export type { VerificationMethod } from "did-resolver";
export type EbsiVerifiablePresentation = EBSIVerifiablePresentation;
export type EbsiVpEnvConfiguration = EbsiEnvConfiguration;
export type ProofPurposeTypes = "assertionMethod" | "authentication" | "capabilityDelegation" | "capabilityInvocation";
export interface CreateVerifiablePresentationJwtOptions extends CreateVerifiableCredentialOptions {
    nbf?: number;
    exp?: number;
    /**
     * The nonce is used to stop a replay attack.
     */
    nonce?: string;
    /**
     * EBSI environment configuration.
     * This option allows you to override the default URLs (TIR, DIDR, TSR, VP Schema).
     */
    ebsiEnvConfig?: EbsiVpEnvConfiguration;
    /**
     * Verification relationship
     */
    proofPurpose?: ProofPurposeTypes;
}
export interface VerifyPresentationJwtOptions extends VerifyCredentialOptions {
    /**
     * EBSI environment configuration.
     * This option allows you to override the default URLs (TIR, DIDR, TSR, VP Schema).
     */
    ebsiEnvConfig?: EbsiVpEnvConfiguration;
    /**
     * Determines whether to validate the signature of the VP JWT or not.
     * Validation is active by default.
     *
     * @defaultValue false
     */
    skipSignatureValidation?: boolean;
    /**
     * Determines whether to validate the resolution of the VP holder DID or not.
     * Validation is active by default.
     *
     * @defaultValue false
     */
    skipHolderDidResolutionValidation?: boolean;
    /**
     * Verification relationship
     */
    proofPurpose?: ProofPurposeTypes;
}
export interface VpJwtPayload extends JWTPayload {
    iss: string;
    sub: string;
    vp: EbsiVerifiablePresentation;
    jti: string;
}
export interface VpJwtHeader extends JWTHeaderParameters {
    alg: "ES256" | "ES256K" | "EdDSA";
    kid: string;
    typ: "JWT";
    jwk?: JWK;
}
export interface ValidateSignatureOptions {
    /**
     * Axios requests timeout. Default: 15 seconds
     */
    timeout?: number;
}
