"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const jose_1 = __importDefault(require("jose"));
const ethers_1 = require("ethers");
const did_jwt_1 = require("@cef-ebsi/did-jwt");
const utils_1 = require("./utils");
const constants_1 = require("./constants");
const defaultExpiration = {
    requestToken: 15,
};
class Agent {
    constructor(scope = constants_1.Scope.COMPONENT, privateKey, opts) {
        this.issuer = " ";
        this.expiration = defaultExpiration;
        this.scope = scope;
        if (privateKey) {
            if (scope === constants_1.Scope.USER)
                this.privateKey = privateKey;
            else
                this.privateKey = utils_1.privateKeyAsJWK(privateKey);
        }
        else {
            this.privateKey = utils_1.randomKey(scope);
        }
        if (scope === constants_1.Scope.USER) {
            const privKeyHex = this.privateKey;
            const privKeyHex0x = `0x${privKeyHex}`;
            const signingKey = new ethers_1.ethers.utils.SigningKey(privKeyHex0x);
            this.user = {
                publicKey: signingKey.publicKey,
                did: `did:ebsi:${new ethers_1.ethers.Wallet(privKeyHex0x).address}`,
                signer: did_jwt_1.SimpleSigner(privKeyHex),
            };
            this.issuer = this.user.did;
        }
        if (opts) {
            if (opts.expiration)
                this.expiration = opts.expiration;
            if (opts.issuer)
                this.issuer = opts.issuer;
        }
    }
    async createRequestPayload(appName, opts) {
        let token;
        if (this.scope === constants_1.Scope.USER) {
            const iat = Math.round(Date.now() / 1000);
            // token using did-jwt
            const payload = {
                iss: this.issuer,
                aud: appName,
                publicKey: this.user.publicKey,
                did: this.user.did,
                iat,
                exp: iat + this.expiration.requestToken,
                ...opts,
            };
            token = await did_jwt_1.createJwt(payload, {
                alg: "ES256K-R",
                issuer: this.issuer,
                signer: this.user.signer,
            });
        }
        else {
            // token using jose library
            const payload = {
                iss: this.issuer,
                aud: appName,
                ...opts,
            };
            token = jose_1.default.JWT.sign(payload, this.privateKey, {
                algorithm: "ES256K",
                header: {
                    typ: "JWT",
                },
                expiresIn: `${this.expiration.requestToken} seconds`,
            });
        }
        const request = {
            grantType: constants_1.GRANT_TYPE,
            assertion: token,
            scope: this.scope,
        };
        return request;
    }
}
exports.default = Agent;
//# sourceMappingURL=agent.js.map