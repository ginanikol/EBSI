"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const axios_1 = __importDefault(require("axios"));
const jose_1 = __importDefault(require("jose"));
const errors_1 = require("./errors");
class TrustedAppRegistry {
    constructor(provider) {
        this.provider = provider;
    }
    /*
     * Get public key from the Trusted App Registry
     */
    async getPublicKey(appName) {
        const url = `${this.provider}/apps/${appName}`;
        try {
            const response = await axios_1.default.get(url);
            const base64pubkey = response.data.pubKey;
            const publicKeyPEM = Buffer.from(base64pubkey, "base64").toString("utf8");
            return publicKeyPEM;
        }
        catch (error) {
            if (!error.response || error.response.status !== 404)
                throw error;
            return null;
        }
    }
    /*
     * Check authorization
     * This function checks if "authorizedAppName" is authorized
     * to use "appName".
     */
    async checkAuthorization(appName, authorizedAppName) {
        const url = `${this.provider}/apps/${appName}/authorized-apps/${authorizedAppName}`;
        try {
            await axios_1.default.get(url);
            return true;
        }
        catch (error) {
            if (!error.response || error.response.status !== 404)
                throw error;
            else
                throw new errors_1.InvalidAppError(error.response.data);
        }
    }
    /*
     * Verify
     * Verify that the token has been signed by an App listed
     * in the Trusted App Registry
     */
    async verify(token) {
        let payload;
        try {
            payload = jose_1.default.JWT.decode(token);
        }
        catch (error) {
            throw new errors_1.InvalidTokenError(error.message);
        }
        // Check the list of Trusted Apps
        const publicKeyPEM = await this.getPublicKey(payload.iss);
        if (!publicKeyPEM)
            throw new errors_1.IssuerNotFoundError(`'${payload.iss}' not found in the list of trusted apps`);
        try {
            // Check the signature
            jose_1.default.JWT.verify(token, publicKeyPEM);
            return payload;
        }
        catch (error) {
            throw new errors_1.InvalidTokenError(error.message);
        }
    }
}
exports.default = TrustedAppRegistry;
//# sourceMappingURL=trustedAppRegistry.js.map