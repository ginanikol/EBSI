import jose from "jose";
declare type Expiration = {
    requestToken: number;
    accessToken?: number;
};
declare type JWTOptions = {
    scope?: string;
    audience?: string;
    expiration?: Expiration;
    tarProvider?: string;
    didResolver?: any;
};
declare function privateKeyAsJWK(privateKey: string | jose.JWK.ECKey): jose.JWK.ECKey;
declare function randomKey(scope?: string): string | jose.JWK.ECKey;
declare function decode(token: any): {
    headers: any;
    payload: any;
};
declare function deduceScope(token: string | {
    headers: any;
    payload: any;
}): string;
declare function checkHeaders(headers: {
    alg: string;
    typ: string;
}, opts?: JWTOptions): boolean;
declare function checkPayload(payload: {
    [key: string]: string | number;
}, opts?: JWTOptions): boolean;
declare function checkHeadersPayload(token: string, options?: JWTOptions): {
    headers: any;
    payload: any;
    scope: string;
};
declare function verify(token: string, opts?: JWTOptions): Promise<void>;
export { privateKeyAsJWK, randomKey, checkHeaders, checkPayload, checkHeadersPayload, decode, deduceScope, verify, };
//# sourceMappingURL=utils.d.ts.map