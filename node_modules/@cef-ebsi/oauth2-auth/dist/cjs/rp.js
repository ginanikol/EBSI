"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _RP_privateKey;
Object.defineProperty(exports, "__esModule", { value: true });
exports.RP = void 0;
const did_jwt_1 = require("did-jwt");
const basics_1 = require("multiformats/basics");
const uuid_1 = require("uuid");
const constants_js_1 = require("./constants.js");
const utils_js_1 = require("./utils.js");
const { base64url } = basics_1.bases;
class RP {
    constructor(opts) {
        var _a;
        _RP_privateKey.set(this, void 0);
        __classPrivateFieldSet(this, _RP_privateKey, opts.privateKey, "f");
        this.name = opts.name;
        this.trustedAppsRegistry = opts.trustedAppsRegistry;
        this.kid = `${this.trustedAppsRegistry}/${this.name}`;
        this.expiration = (_a = opts === null || opts === void 0 ? void 0 : opts.expiration) !== null && _a !== void 0 ? _a : constants_js_1.defaultExpiration;
    }
    createAccessToken(body, resultVerification, payloadToken) {
        return __awaiter(this, void 0, void 0, function* () {
            if (body.grantType !== constants_js_1.GRANT_TYPE) {
                throw new Error(`grantType must be '${constants_js_1.GRANT_TYPE}'`);
            }
            if (!body.clientAssertion) {
                throw new Error("No assertion present in the body");
            }
            if (body.scope && body.scope !== constants_js_1.SCOPE) {
                throw new Error(`Invalid scope '${body.scope}'`);
            }
            (0, utils_js_1.checkHeadersPayload)(body.clientAssertion);
            const { payload: verifPayload, protectedHeader: verifHeader, publicKeyHex, } = resultVerification;
            const jwtOpts = {
                issuer: this.name,
                signer: (0, did_jwt_1.ES256KSigner)(Buffer.from(__classPrivateFieldGet(this, _RP_privateKey, "f").replace(/^0x/, ""), "hex")),
                expiresIn: this.expiration.accessToken,
            };
            const headerOpts = {
                typ: "JWT",
                alg: "ES256K",
                kid: this.kid,
            };
            const accessToken = yield (0, did_jwt_1.createJWT)(Object.assign({ sub: verifPayload.iss, aud: verifPayload.aud, atHash: base64url.baseEncode((0, utils_js_1.computeHash)(body.clientAssertion)), nonce: (0, uuid_1.v4)() }, payloadToken), jwtOpts, headerOpts);
            const encryptedAccessToken = (0, utils_js_1.encrypt)({
                access_token: accessToken,
                kid: this.kid,
                nonce: verifPayload["nonce"],
            }, publicKeyHex);
            const ake1Sig = yield (0, did_jwt_1.createJWT)({
                ake1_nonce: verifPayload["nonce"],
                ake1_enc_payload: encryptedAccessToken,
                kid: verifHeader.kid,
            }, jwtOpts, headerOpts);
            const ake1SigPayloadBase64url = ake1Sig.split(".")[1];
            const ake1SigPayload = JSON.parse(basics_1.bytes.toString(base64url.baseDecode(ake1SigPayloadBase64url)));
            const ake1JwsDetached = ake1Sig.replace(ake1SigPayloadBase64url, "");
            return {
                ake1_enc_payload: encryptedAccessToken,
                ake1_sig_payload: ake1SigPayload,
                ake1_jws_detached: ake1JwsDetached,
                kid: this.kid,
            };
        });
    }
}
exports.RP = RP;
_RP_privateKey = new WeakMap();
//# sourceMappingURL=rp.js.map