var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _RP_privateKey;
import { createJWT, ES256KSigner } from "did-jwt";
import { bases, bytes } from "multiformats/basics";
import { v4 as uuidv4 } from "uuid";
import { defaultExpiration, GRANT_TYPE, SCOPE } from "./constants.js";
import { checkHeadersPayload, computeHash, encrypt } from "./utils.js";
const { base64url } = bases;
export class RP {
    constructor(opts) {
        _RP_privateKey.set(this, void 0);
        __classPrivateFieldSet(this, _RP_privateKey, opts.privateKey, "f");
        this.name = opts.name;
        this.trustedAppsRegistry = opts.trustedAppsRegistry;
        this.kid = `${this.trustedAppsRegistry}/${this.name}`;
        this.expiration = opts?.expiration ?? defaultExpiration;
    }
    async createAccessToken(body, resultVerification, payloadToken) {
        if (body.grantType !== GRANT_TYPE) {
            throw new Error(`grantType must be '${GRANT_TYPE}'`);
        }
        if (!body.clientAssertion) {
            throw new Error("No assertion present in the body");
        }
        if (body.scope && body.scope !== SCOPE) {
            throw new Error(`Invalid scope '${body.scope}'`);
        }
        checkHeadersPayload(body.clientAssertion);
        const { payload: verifPayload, protectedHeader: verifHeader, publicKeyHex, } = resultVerification;
        const jwtOpts = {
            issuer: this.name,
            signer: ES256KSigner(Buffer.from(__classPrivateFieldGet(this, _RP_privateKey, "f").replace(/^0x/, ""), "hex")),
            expiresIn: this.expiration.accessToken,
        };
        const headerOpts = {
            typ: "JWT",
            alg: "ES256K",
            kid: this.kid,
        };
        const accessToken = await createJWT({
            sub: verifPayload.iss,
            aud: verifPayload.aud,
            atHash: base64url.baseEncode(computeHash(body.clientAssertion)),
            nonce: uuidv4(),
            ...payloadToken,
        }, jwtOpts, headerOpts);
        const encryptedAccessToken = encrypt({
            access_token: accessToken,
            kid: this.kid,
            nonce: verifPayload["nonce"],
        }, publicKeyHex);
        const ake1Sig = await createJWT({
            ake1_nonce: verifPayload["nonce"],
            ake1_enc_payload: encryptedAccessToken,
            kid: verifHeader.kid,
        }, jwtOpts, headerOpts);
        const ake1SigPayloadBase64url = ake1Sig.split(".")[1];
        const ake1SigPayload = JSON.parse(bytes.toString(base64url.baseDecode(ake1SigPayloadBase64url)));
        const ake1JwsDetached = ake1Sig.replace(ake1SigPayloadBase64url, "");
        return {
            ake1_enc_payload: encryptedAccessToken,
            ake1_sig_payload: ake1SigPayload,
            ake1_jws_detached: ake1JwsDetached,
            kid: this.kid,
        };
    }
}
_RP_privateKey = new WeakMap();
//# sourceMappingURL=rp.js.map