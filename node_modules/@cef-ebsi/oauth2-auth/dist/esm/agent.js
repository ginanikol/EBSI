var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _Agent_privateKey;
import { v4 as uuidv4 } from "uuid";
import { createJWT, ES256KSigner } from "did-jwt";
import { base64url } from "multiformats/bases/base64";
import { jwtVerify } from "jose";
import { InvalidTokenError } from "./errors/index.js";
import { CLIENT_ASSERTION_TYPE, GRANT_TYPE, SCOPE, defaultExpiration, } from "./constants.js";
import { decrypt } from "./utils.js";
import { verifyJwtTar } from "./verifier.js";
export class Agent {
    constructor(opts) {
        _Agent_privateKey.set(this, void 0);
        __classPrivateFieldSet(this, _Agent_privateKey, opts.privateKey, "f");
        this.name = opts.name;
        this.trustedAppsRegistry = opts.trustedAppsRegistry;
        this.expiration = opts.expiration ?? defaultExpiration;
        this.kid = `${this.trustedAppsRegistry}/${this.name}`;
    }
    async createRequest(resourceApp, payload = {}) {
        return {
            grantType: GRANT_TYPE,
            clientAssertionType: CLIENT_ASSERTION_TYPE,
            scope: SCOPE,
            clientAssertion: await createJWT({
                jti: uuidv4(),
                aud: resourceApp,
                sub: this.name,
                ...payload,
            }, {
                issuer: this.name,
                signer: ES256KSigner(Buffer.from(__classPrivateFieldGet(this, _Agent_privateKey, "f").replace(/^0x/, ""), "hex")),
                expiresIn: this.expiration.requestToken,
            }, {
                typ: "JWT",
                alg: "ES256K",
                kid: this.kid,
            }),
        };
    }
    async verifyAkeResponse(response, opts) {
        const { ake1_enc_payload: ake1EncPayload, ake1_sig_payload: ake1SigPayload, ake1_jws_detached: ake1JwsDetached, } = response;
        const ake1DecPayload = JSON.parse(decrypt(__classPrivateFieldGet(this, _Agent_privateKey, "f"), ake1EncPayload));
        const { kid, nonce, access_token: accessToken } = ake1DecPayload;
        if (typeof kid !== "string" ||
            typeof accessToken !== "string" ||
            typeof nonce !== "string") {
            throw new Error(`invalid decrypted payload. Received: ${JSON.stringify(ake1DecPayload)}`);
        }
        if (nonce !== opts.nonce) {
            throw new Error(`Expected nonce ${opts.nonce}. Received ${nonce}`);
        }
        const verification = await verifyJwtTar(accessToken, {
            trustedAppsRegistry: this.trustedAppsRegistry,
            op: opts.op,
            timeout: opts.timeout,
        });
        const ake1SignPayload = ake1JwsDetached.replace("..", `.${base64url.baseEncode(Buffer.from(JSON.stringify(ake1SigPayload)))}.`);
        try {
            await jwtVerify(ake1SignPayload, verification.publicKey);
        }
        catch (error) {
            throw new InvalidTokenError(`invalid detached signature: ${error.message}`);
        }
        return accessToken;
    }
}
_Agent_privateKey = new WeakMap();
//# sourceMappingURL=agent.js.map