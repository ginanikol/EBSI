"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.resolve = void 0;
const axios_1 = __importDefault(require("axios"));
const errors_js_1 = require("../errors.js");
const constants_js_1 = require("../constants.js");
const AXIOS_TIMEOUT = 15000;
const SUPPORTED_CONTENT_TYPES = [
    "application/did+ld+json",
    "application/did+json",
];
function isSupportedContentType(contentType) {
    return SUPPORTED_CONTENT_TYPES.includes(contentType);
}
function get(url, contentType, timeout) {
    var _a, _b, _c;
    return __awaiter(this, void 0, void 0, function* () {
        try {
            const response = yield axios_1.default.get(url, {
                headers: {
                    accept: contentType,
                },
                timeout: timeout || AXIOS_TIMEOUT,
            });
            return response.data;
        }
        catch (e) {
            let message = "";
            if (axios_1.default.isAxiosError(e)) {
                try {
                    const { detail, title } = (_a = e.response) === null || _a === void 0 ? void 0 : _a.data;
                    message = detail || title;
                }
                catch (err) {
                    message = e.message;
                }
                throw new errors_js_1.ProblemDetailsError(((_b = e.response) === null || _b === void 0 ? void 0 : _b.status) || 500, ((_c = e.response) === null || _c === void 0 ? void 0 : _c.statusText) || "", {
                    detail: message,
                });
            }
            throw e;
        }
    });
}
function resolve(did, registry, didResolutionOptions) {
    return __awaiter(this, void 0, void 0, function* () {
        if (!registry) {
            return {
                didDocument: null,
                didDocumentMetadata: {},
                didResolutionMetadata: {
                    error: constants_js_1.DID_RESOLUTION_ERROR_CODES.CONFIGURATION_ERROR,
                    message: "A DID registry must be defined in order to resolve EBSI DID method v1 documents",
                },
            };
        }
        let accept = "application/did+ld+json";
        if (didResolutionOptions && didResolutionOptions.accept) {
            if (!isSupportedContentType(didResolutionOptions.accept)) {
                return {
                    didDocument: null,
                    didDocumentMetadata: {},
                    didResolutionMetadata: {
                        error: constants_js_1.DID_RESOLUTION_ERROR_CODES.REPRESENTATION_NOT_SUPPORTED,
                        message: `Representation ${didResolutionOptions.accept} is not supported. Valid representations include: ${SUPPORTED_CONTENT_TYPES.join(", ")}`,
                    },
                };
            }
            accept = didResolutionOptions.accept;
        }
        try {
            const timeout = didResolutionOptions &&
                typeof didResolutionOptions["timeout"] === "number"
                ? didResolutionOptions["timeout"]
                : AXIOS_TIMEOUT;
            const didDocument = yield get(`${registry}/${did}`, accept, timeout);
            return {
                didDocument,
                didDocumentMetadata: {},
                didResolutionMetadata: { contentType: accept },
            };
        }
        catch (e) {
            let error = constants_js_1.DID_RESOLUTION_ERROR_CODES.UNKNOWN_ERROR;
            let message = "";
            if (e instanceof errors_js_1.ProblemDetailsError) {
                if (e.status === 400) {
                    error = constants_js_1.DID_RESOLUTION_ERROR_CODES.INVALID_DID;
                    message = e.detail || e.title || "Bad Request";
                }
                else if (e.status === 404) {
                    error = constants_js_1.DID_RESOLUTION_ERROR_CODES.NOT_FOUND;
                    message = e.detail || e.title || "Not Found";
                }
                else if (e.status === 500) {
                    error = constants_js_1.DID_RESOLUTION_ERROR_CODES.INTERNAL_SERVER_ERROR;
                    message = e.detail || e.title || "Internal Server Error";
                }
                else {
                    message = e.detail || e.title || "unknown";
                }
            }
            else if (e instanceof Error) {
                message = e.message;
            }
            return {
                didDocument: null,
                didDocumentMetadata: {},
                didResolutionMetadata: {
                    error,
                    message: `${message} | Registry used: ${registry}`,
                },
            };
        }
    });
}
exports.resolve = resolve;
//# sourceMappingURL=v1.js.map