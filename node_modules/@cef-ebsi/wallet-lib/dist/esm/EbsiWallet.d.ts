import type BN from "bn.js";
import type { curve } from "elliptic";
import type { TransactionRequest, Provider } from "@ethersproject/providers";
import elliptic from "elliptic";
import { JWTHeader } from "did-jwt";
import type { JWK } from "jose";
import type { EBSIJWKECKey, EBSIJWKEllipticCurve, EBSIJWKType, EBSIKeyFormat } from "./types.js";
declare const LEGAL_ENTITY = "LEGAL_ENTITY";
declare const NATURAL_PERSON = "NATURAL_PERSON";
export interface KeyOptions {
    format?: EBSIKeyFormat;
    keyType?: EBSIJWKType;
    keyCurve?: EBSIJWKEllipticCurve;
}
export interface KeyPair<T extends string | EBSIJWKECKey = string | EBSIJWKECKey> {
    keyOptions: KeyOptions;
    publicKey: T;
    privateKey: T;
}
export declare class EbsiWallet {
    #private;
    static ec: elliptic.ec;
    constructor(privateKey: string | Uint8Array);
    static createDid(version?: typeof LEGAL_ENTITY): string;
    static createDid(version: typeof NATURAL_PERSON, publicKeyJwk: JWK): string;
    static formatPublicKey(publicKey: curve.base.BasePoint, format?: "pem" | "hex"): string;
    static formatPublicKey(publicKey: curve.base.BasePoint, format: "jwk"): EBSIJWKECKey;
    static formatPublicKey(publicKey: curve.base.BasePoint, format?: EBSIKeyFormat): string | EBSIJWKECKey;
    static formatPrivateKey(privateKey: BN, format?: "pem" | "hex"): string;
    static formatPrivateKey(privateKey: BN, format: "jwk"): EBSIJWKECKey;
    static formatPrivateKey(privateKey: BN, format?: EBSIKeyFormat): string | EBSIJWKECKey;
    static generateKeyPair(opts?: {
        format?: "hex" | "pem";
    }): KeyPair<string>;
    static generateKeyPair(opts: {
        format: "jwk";
    }): KeyPair<EBSIJWKECKey>;
    getPublicKey(opts?: {
        format?: "hex" | "pem";
    }): string;
    getPublicKey(opts: {
        format: "jwk";
    }): EBSIJWKECKey;
    getEthereumAddress(): string;
    static prepareEthereumTransaction(txRequest: TransactionRequest, provider: Provider): Promise<TransactionRequest>;
    signJwt(payload: {
        [x: string]: unknown;
    }, options: {
        issuer: string;
        expiresIn?: number;
    }, header?: Partial<JWTHeader>): Promise<string>;
}
export {};
//# sourceMappingURL=EbsiWallet.d.ts.map