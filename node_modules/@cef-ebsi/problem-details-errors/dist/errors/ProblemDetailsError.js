"use strict";
/**
 * Base class implementing Problem Details for HTTP APIs.
 * RFC: [Problem Details for HTTP APIs](https://tools.ietf.org/html/rfc7807)
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.ProblemDetailsError = void 0;
class ProblemDetailsError extends Error {
    /**
     * @param status The HTTP status code generated by the origin server for this occurrence of the problem.
     * @param title A short, human-readable summary of the problem type. It SHOULD NOT change from occurrence to occurrence of the problem, except for purposes of localization.
     * @param options An object containing optional properties.
     * @param options.type A URI reference that identifies the problem type. This specification encourages that, when dereferenced, it provides human-readable documentation for the problem type. When this member is not present, its value is assumed to be "about:blank".
     * @param options.detail A human-readable explanation specific to this occurrence of the problem.
     * @param options.instance A URI reference that identifies the specific occurrence of the problem.  It may or may not yield further information if dereferenced.
     * @param options.extensions Extension members. See https://tools.ietf.org/html/rfc7807#section-3.2
     */
    constructor(status, title, options) {
        super(title);
        this.name = "ProblemDetailsError";
        this.status = status;
        this.title = title;
        // Extra
        if (options) {
            if (options.type)
                this.type = options.type;
            if (options.detail)
                this.detail = options.detail;
            if (options.instance)
                this.instance = options.instance;
            if (options.extensions)
                this.extensions = options.extensions;
        }
        // Set type if no value was provided
        if (!this.type)
            this.type = "about:blank";
    }
    toJSON() {
        return {
            title: this.title,
            status: this.status,
            ...(this.type && { type: this.type }),
            ...(this.detail && { detail: this.detail }),
            ...(this.instance && { instance: this.instance }),
            ...this.extensions,
        };
    }
    toString() {
        return `${this.status} - ${this.title}`;
    }
}
exports.ProblemDetailsError = ProblemDetailsError;
exports.default = ProblemDetailsError;
//# sourceMappingURL=ProblemDetailsError.js.map