"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getLegacyResolver = exports.getResolver = void 0;
const constants_1 = require("./constants");
const resolvers_1 = require("./resolvers");
const validator_1 = require("./validator");
/**
 * EBSI DID Resolver for the "did:ebsi:" method. Supports only Legal Entities (DID Method v1).
 */
function getResolver(resolverOptions) {
    async function resolve(did, parsedDid, context, didResolutionOptions) {
        if (!resolverOptions || typeof resolverOptions !== "object") {
            return {
                didDocument: null,
                didDocumentMetadata: {},
                didResolutionMetadata: {
                    error: constants_1.DID_RESOLUTION_ERROR_CODES.CONFIGURATION_ERROR,
                    message: "Invalid or missing resolver options",
                },
            };
        }
        // Validate DID, get DID method version
        let version;
        try {
            version = (0, validator_1.validate)(did);
        }
        catch (e) {
            const message = e instanceof Error ? e.message : "Unknown error";
            return {
                didDocument: null,
                didDocumentMetadata: {},
                didResolutionMetadata: {
                    error: "invalidDid",
                    message,
                },
            };
        }
        if (version !== constants_1.EBSI_DID_SPECS.LEGAL_ENTITY.VERSION_ID) {
            return {
                didDocument: null,
                didDocumentMetadata: {},
                didResolutionMetadata: {
                    error: "invalidDid",
                    message: "Unsupported version",
                },
            };
        }
        return (0, resolvers_1.resolveV1)(did, resolverOptions.registry, didResolutionOptions);
    }
    return { ebsi: resolve };
}
exports.getResolver = getResolver;
/**
 * Legacy EBSI DID Resolver for the "did:ebsi:" method. Supports both Legal Entities (DID Method v1) and Natural Persons (DID Method v2).
 * Note that Natural Persons should use the "did:key" method and its associated resolver.
 *
 * @deprecated Use getLegalEntitiesResolver and/or getNaturalPersonsResolver instead
 */
function getLegacyResolver(resolverOptions) {
    async function resolve(did, parsedDid, context, didResolutionOptions) {
        if (!resolverOptions || typeof resolverOptions !== "object") {
            return {
                didDocument: null,
                didDocumentMetadata: {},
                didResolutionMetadata: {
                    error: constants_1.DID_RESOLUTION_ERROR_CODES.CONFIGURATION_ERROR,
                    message: "Invalid or missing resolver options",
                },
            };
        }
        // Validate DID, get DID method version
        let version;
        try {
            version = (0, validator_1.validate)(did);
        }
        catch (e) {
            const message = e instanceof Error ? e.message : "Unknown error";
            return {
                didDocument: null,
                didDocumentMetadata: {},
                didResolutionMetadata: {
                    error: "invalidDid",
                    message,
                },
            };
        }
        if (version === constants_1.EBSI_DID_SPECS.LEGAL_ENTITY.VERSION_ID) {
            return (0, resolvers_1.resolveV1)(did, resolverOptions.registry, didResolutionOptions);
        }
        if (version === constants_1.EBSI_DID_SPECS.NATURAL_PERSON.VERSION_ID) {
            return (0, resolvers_1.resolveV2)(did, resolverOptions.naturalPersonJwks, didResolutionOptions);
        }
        return {
            didDocument: null,
            didDocumentMetadata: {},
            didResolutionMetadata: {
                error: "invalidDid",
                message: "Unsupported version",
            },
        };
    }
    return { ebsi: resolve };
}
exports.getLegacyResolver = getLegacyResolver;
exports.default = getResolver;
//# sourceMappingURL=resolver.js.map