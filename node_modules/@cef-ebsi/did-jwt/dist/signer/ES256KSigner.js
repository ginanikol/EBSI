"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const base64url_1 = __importDefault(require("base64url"));
const SimpleSigner_1 = require("../SimpleSigner");
const SignerAlgo_1 = __importDefault(require("./SignerAlgo"));
class ES256KSigner extends SignerAlgo_1.default {
    constructor(recoverable) {
        super();
        this.recoverable = recoverable;
    }
    async sign(payload, signer) {
        let signature = await signer(payload);
        if (super.instanceOfEcdsaSignature(signature)) {
            // to be compatible with old signer
            // make sure we have string as signature
            signature = SimpleSigner_1.ecdsaSigToJose(signature);
        }
        const sigBuf = base64url_1.default.toBuffer(signature);
        if (this.recoverable && sigBuf.length !== 65) {
            throw new Error("Signer did not return a recoveryParam");
        }
        else if (!this.recoverable) {
            // Remove recoveryParam if present
            if (sigBuf.length === 65)
                signature = base64url_1.default.encode(sigBuf.slice(0, 64));
        }
        return signature;
    }
}
exports.default = ES256KSigner;
//# sourceMappingURL=ES256KSigner.js.map