"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const tweetnacl_ts_1 = require("tweetnacl-ts");
const utf8_1 = require("utf8");
const buffer_1 = require("buffer");
const base64url_1 = __importDefault(require("base64url"));
const util_1 = require("./util");
/**
 *  The NaclSigner returns a configured function for signing data using the Ed25519 algorithm. It also defines
 *  an interface that you can also implement yourself and use in our other modules.
 *
 *  The signing function itself takes the data as a string parameter and returls a base64Url encoded signature
 *
 *  @example
 *  const signer = NaclSigner(process.env.PRIVATE_KEY)
 *  signer(data, (err, signature) => {
 *    ...
 *  })
 *
 *  @param    {String}         base64PrivateKey    a 64 byte base64 encoded private key
 *  @return   {Function}                     a configured signer function
 */
function NaclSigner(base64PrivateKey) {
    const privateKey = util_1.base64ToBytes(base64PrivateKey);
    return async (data) => {
        const dataBytes = buffer_1.Buffer.from(utf8_1.encode(data));
        const sig = tweetnacl_ts_1.sign_detached(dataBytes, privateKey);
        const b64UrlSig = base64url_1.default.encode(buffer_1.Buffer.from(sig));
        return b64UrlSig;
    };
}
exports.default = NaclSigner;
//# sourceMappingURL=NaclSigner.js.map