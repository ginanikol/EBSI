"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ecdsaSigToJose = void 0;
const elliptic_1 = require("elliptic");
const base64url_1 = __importDefault(require("base64url"));
const crypto_1 = require("./crypto");
const secp256k1 = new elliptic_1.ec("secp256k1");
function leftpad(data, size = 64) {
    if (data.length === size)
        return data;
    return "0".repeat(size - data.length) + data;
}
function ecdsaSigToJose({ r, s, recoveryParam, }) {
    const jose = Buffer.alloc(65);
    Buffer.from(r, "hex").copy(jose, 0);
    Buffer.from(s, "hex").copy(jose, 32);
    jose[64] = recoveryParam || 0;
    return base64url_1.default.encode(jose);
}
exports.ecdsaSigToJose = ecdsaSigToJose;
/**
 *  The SimpleSigner returns a configured function for signing data. It also defines
 *  an interface that you can also implement yourself and use in our other modules.
 *
 *  @example
 *  const signer = SimpleSigner(process.env.PRIVATE_KEY)
 *  signer(data, (err, signature) => {
 *    ...
 *  })
 *
 *  @param    {String}         hexPrivateKey    a hex encoded private key
 *  @return   {Function}                     a configured signer function
 */
function SimpleSigner(hexPrivateKey) {
    const privateKey = secp256k1.keyFromPrivate(hexPrivateKey);
    return async (data) => {
        const { r, s, recoveryParam } = privateKey.sign(crypto_1.sha256(data));
        const recParam = recoveryParam === null ? undefined : recoveryParam;
        const signatureObj = {
            r: leftpad(r.toString("hex")),
            s: leftpad(s.toString("hex")),
            recoveryParam: recParam,
        };
        return ecdsaSigToJose(signatureObj);
    };
}
exports.default = SimpleSigner;
//# sourceMappingURL=SimpleSigner.js.map