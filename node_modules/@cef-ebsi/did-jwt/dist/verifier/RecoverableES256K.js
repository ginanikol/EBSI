"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const elliptic_1 = require("elliptic");
const crypto_1 = require("../crypto");
const util_1 = __importDefault(require("./util"));
const secp256k1 = new elliptic_1.ec("secp256k1");
class RecoverableES256KVerifier {
    constructor() {
        this.algoName = "ES256K-R";
    }
    static checkSignatureAgainstSigner(sigObj, data, authenticators) {
        const hash = crypto_1.sha256(data);
        const recoveredKey = secp256k1.recoverPubKey(hash, sigObj, sigObj.recoveryParam);
        const recoveredPublicKeyHex = recoveredKey.encode("hex");
        const recoveredCompressedPublicKeyHex = recoveredKey.encode("hex", true);
        const recoveredAddress = crypto_1.toEthereumAddress(recoveredPublicKeyHex);
        const signer = authenticators.find(({ publicKeyHex, ethereumAddress }) => publicKeyHex === recoveredPublicKeyHex ||
            publicKeyHex === recoveredCompressedPublicKeyHex ||
            ethereumAddress === recoveredAddress);
        if (!signer)
            throw new Error("No signer found!");
        return signer;
    }
    verify(data, signature, authenticators) {
        let signatures;
        if (signature.length > 86) {
            signatures = [util_1.default(signature, true)];
        }
        else {
            const so = util_1.default(signature, false);
            signatures = [
                { ...so, recoveryParam: 0 },
                { ...so, recoveryParam: 1 },
            ];
        }
        const signer = signatures
            .map((sigs) => RecoverableES256KVerifier.checkSignatureAgainstSigner(sigs, data, authenticators))
            .filter((key) => key != null);
        if (signer.length === 0)
            throw new Error(`Signature ${this.algoName} invalid for JWT`);
        return signer[0];
    }
}
exports.default = RecoverableES256KVerifier;
//# sourceMappingURL=RecoverableES256K.js.map