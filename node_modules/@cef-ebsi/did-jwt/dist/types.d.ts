import { DIDDocument, PublicKey } from "did-resolver";
export interface ISigner {
    sign: (payload: string, signer: Signer) => Promise<string>;
}
export interface IVerifier {
    verify: (data: string, signature: string, authenticators: PublicKey[]) => PublicKey;
}
export interface Verified {
    payload: any;
    doc: DIDDocument;
    issuer: string;
    signer: object;
    jwt: string;
}
export interface PublicKeyTypes {
    [name: string]: string[];
}
export declare const SUPPORTED_PUBLIC_KEY_TYPES: PublicKeyTypes;
export interface EcdsaSignature {
    r: string;
    s: string;
    recoveryParam?: number;
}
export declare type Signer = (data: string) => Promise<EcdsaSignature | string>;
export interface JWTOptions {
    issuer: string;
    signer: Signer;
    alg?: string;
    expiresIn?: number;
}
export interface Resolvable {
    resolve: (did: string) => Promise<DIDDocument | null>;
}
export interface JWTVerifyOptions {
    auth?: boolean;
    audience?: string;
    callbackUrl?: string;
    resolver?: Resolvable | string;
}
export interface DIDAuthenticator {
    authenticators: PublicKey[];
    issuer: string;
    doc: DIDDocument;
}
export interface JWTHeader {
    typ: "JWT";
    alg: string;
    [x: string]: any;
}
export interface JWTPayload {
    iss?: string;
    sub?: string;
    aud?: string;
    iat?: number;
    nbf?: number;
    type?: string;
    exp?: number;
    rexp?: number;
    [x: string]: any;
}
export interface JWTDecoded {
    header: JWTHeader;
    payload: JWTPayload;
    signature: string;
    data: string;
}
export declare const defaultAlg = "ES256K";
export declare function encodeSection(data: any): string;
export declare const NBF_SKEW = 300;
//# sourceMappingURL=types.d.ts.map